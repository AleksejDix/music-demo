{"remainingRequest":"/Users/aleksej/Projects/what2vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aleksej/Projects/what2vue/src/views/Discover/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/aleksej/Projects/what2vue/src/views/Discover/index.vue","mtime":1615051630927},{"path":"/Users/aleksej/Projects/what2vue/node_modules/css-loader/dist/cjs.js","mtime":1610645763104},{"path":"/Users/aleksej/Projects/what2vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610645763935},{"path":"/Users/aleksej/Projects/what2vue/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1610645764227},{"path":"/Users/aleksej/Projects/what2vue/node_modules/cache-loader/dist/cjs.js","mtime":1610645746854},{"path":"/Users/aleksej/Projects/what2vue/node_modules/vue-loader/lib/index.js","mtime":1610645763935}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZmlsdGVyIHsKICBwYWRkaW5nOiAxcmVtIDA7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4LA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Discover","sourcesContent":["<template>\n  <section class=\"max-w-7xl mx-auto sm:px-6 lg:px-8 grid gap-2\">\n    <header class=\"flex justify-between\">\n      <header class=\"flex justify-between\">\n        <h2 class=\"uppercase font-bold\">{{ $route.name }} â€¢ {{ total }}</h2>\n      </header>\n    </header>\n    <div class=\"filter\">\n      <form class=\"flex gap-2\" @submit.prevent=\"submit\">\n        <label v-if=\"genres_options.length > 0\" class=\"block\">\n          <span class=\"text-gray-700\">Genre</span>\n          <select\n            v-model=\"with_genres\"\n            name=\"with_genres\"\n            class=\"form-select block w-full mt-1\"\n          >\n            <option disabled value=\"\">select genre</option>\n            <option\n              v-for=\"option in genres_options\"\n              :key=\"option.id\"\n              :value=\"option.id\"\n            >\n              {{ option.name }}\n            </option>\n          </select>\n        </label>\n\n        <label class=\"block\">\n          <span class=\"text-gray-700\">Sort by</span>\n          <select\n            v-model=\"sort_by\"\n            name=\"sort_by\"\n            class=\"form-select block w-full mt-1\"\n          >\n            <option\n              v-for=\"option in sort_options\"\n              :key=\"option.value\"\n              :value=\"option.value\"\n            >\n              {{ option.name }}\n            </option>\n          </select>\n        </label>\n\n        <label class=\"block\">\n          <span class=\"text-gray-700\">Order</span>\n          <select\n            v-model=\"sort_order\"\n            name=\"sort_by\"\n            class=\"form-select block w-full mt-1\"\n          >\n            <option\n              v-for=\"option in sort_order_options\"\n              :key=\"option.value\"\n              :value=\"option.value\"\n            >\n              {{ option.name }}\n            </option>\n          </select>\n        </label>\n\n        <button class=\"hidden\">send</button>\n      </form>\n    </div>\n    <div v-if=\"hasMovies\">\n      <MovieList :list=\"movies\" />\n      <IntersectionObserver\n        :options=\"{ rootMargin: '300px' }\"\n        @intersect=\"nextPage\"\n      />\n    </div>\n  </section>\n</template>\n\n<script>\nimport api from '@/api'\nimport MovieList from '@/components/MovieList'\nimport IntersectionObserver from '@/components/IntersectionObserver'\n\nexport default {\n  components: { MovieList, IntersectionObserver },\n  data() {\n    return {\n      total: 0,\n      movies: [],\n      page: +this.$route.query.page || 1,\n      sort_by: this.$route.query.sort_by || 'popularity',\n      sort_order: this.$route.query.sort_order || 'desc',\n      with_genres: '',\n      genres_options: [],\n      sort_options: [\n        { value: 'popularity', name: 'Popularity' },\n        { value: 'revenue', name: 'Revenue' },\n        { value: 'vote_count', name: 'Rating' },\n      ],\n      sort_order_options: [\n        { value: 'asc', name: 'low to high' },\n        { value: 'desc', name: 'hight to low' },\n      ],\n    }\n  },\n  computed: {\n    hasMovies() {\n      return this.movies.length > 0\n    },\n    query() {\n      return {\n        page: this.page,\n        with_genres: this.with_genres || '',\n        sort_by: this.sort_by,\n        sort_order: this.sort_order,\n      }\n    },\n  },\n  watch: {\n    'query.page'(next, prev) {\n      if (next > prev) {\n        this.loadMore(next)\n      }\n    },\n    async 'query.sort_order'(next, prev) {\n      if (next !== prev) {\n        this.reset()\n      }\n    },\n    async 'query.sort_by'(next, prev) {\n      if (next !== prev) {\n        this.reset(next)\n      }\n    },\n    async 'query.with_genres'(next, prev) {\n      if (next !== prev) {\n        this.reset(next)\n      }\n    },\n    '$route.query'(next, prev) {\n      if (next !== prev) {\n        this.page = next.page\n        this.with_genres = next.with_genres\n        this.sort_by = next.sort_by\n        this.sort_order = next.sort_order\n      }\n    },\n  },\n  async mounted() {\n    this.genres_options = await this.getGenres()\n    this.movies = await this.discover()\n  },\n  destroyed() {\n    this.movies = []\n  },\n  methods: {\n    async getGenres() {\n      const response = await api.genre.index()\n      return response.genres\n    },\n    async discover() {\n      const query = this.query\n      const response = await api.movieDiscover.index({ query })\n      const { total_results, results } = response\n      this.total = total_results\n      return results\n    },\n    nextPage() {\n      this.page++\n      this.updateQuery(this.query)\n    },\n    async loadMore() {\n      this.movies = this.movies.concat(await this.discover())\n    },\n    async reset() {\n      this.page = 1\n      this.movies = []\n      this.updateQuery(this.query)\n      this.movies = await this.discover()\n    },\n    submit() {\n      this.updateQuery(this.query)\n    },\n    updateQuery(query) {\n      const path = this.$route.name\n      this.$router.push({ path, query })\n    },\n  },\n}\n</script>\n\n<style>\n.filter {\n  padding: 1rem 0;\n}\n</style>\n"]}]}