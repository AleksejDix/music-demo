{"remainingRequest":"/Users/aleksej/Projects/what2vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aleksej/Projects/what2vue/src/components/IntersectionObserver.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aleksej/Projects/what2vue/src/components/IntersectionObserver.vue","mtime":1614847452810},{"path":"/Users/aleksej/Projects/what2vue/node_modules/cache-loader/dist/cjs.js","mtime":1610645746854},{"path":"/Users/aleksej/Projects/what2vue/node_modules/babel-loader/lib/index.js","mtime":1610645748948},{"path":"/Users/aleksej/Projects/what2vue/node_modules/cache-loader/dist/cjs.js","mtime":1610645746854},{"path":"/Users/aleksej/Projects/what2vue/node_modules/vue-loader/lib/index.js","mtime":1610645763935}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgb3B0aW9uczogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBvYnNlcnZlcjogbnVsbCwKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zCiAgICB0aGlzLm9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChbZW50cnldKSA9PiB7CiAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5pc0ludGVyc2VjdGluZykgewogICAgICAgIHRoaXMuJGVtaXQoJ2ludGVyc2VjdCcpCiAgICAgIH0KICAgIH0sIG9wdGlvbnMpCgogICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuJGVsKQogIH0sCiAgZGVzdHJveWVkKCkgewogICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCkKICB9LAp9Cg=="},{"version":3,"sources":["IntersectionObserver.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"IntersectionObserver.vue","sourceRoot":"src/components","sourcesContent":["<!-- Observer.vue -->\n<template>\n  <div class=\"observer\" />\n</template>\n\n<script>\nexport default {\n  props: {\n    options: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      observer: null,\n    }\n  },\n  mounted() {\n    const options = this.options\n    this.observer = new IntersectionObserver(([entry]) => {\n      if (entry && entry.isIntersecting) {\n        this.$emit('intersect')\n      }\n    }, options)\n\n    this.observer.observe(this.$el)\n  },\n  destroyed() {\n    this.observer.disconnect()\n  },\n}\n</script>\n"]}]}